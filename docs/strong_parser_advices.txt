1) Надёжный сбор: клиенты, движки и антибот

Два стека запроса: «сырой» HTTP-клиент и «браузерный» рендер (Playwright/PyQtWebEngine/Chromium).

Профили антибот/anti-WAF: прокси-пулы, ротация IP/UA, тайминги, cookie-джар, HTTP/2, поддержка TLS-fingerprint.

Режимы: быстрый текстовый краул, рендеринг JS, «миксованный» (по эвристикам).

2) Управление сессиями, идентификацией и входами

Хранилище cookies по домену и по профилю задачи; быстрое переключение.

Сценарии логина/2FA/рефреш-токенов; «сеанс как ресурс» для последующих модулей.

Политика приватности сессий: изоляция, экспорты/импорты, воспроизводимость.

3) Интеллектуальный краул и карта сайта

Обход ссылок с приоритетами (веса по типам URL, глубине, частоте ошибок).

Нормализация и дедуп: каноникал, параметры, якоря, контент-хэши.

Построение графа (site map + dependency map: HTML → JS → XHR/WebSocket → API).

4) Парсинг форм, параметров и скрытых поверхностей

Авто-извлечение форм/параметров/заголовков; словари параметров (param mining).

Heuristics: «живые» параметры (реально влияющие на ответ), методы (GET/POST/PUT…).

Запоминание успешных путей отправки (anti-CSRF токены, динамика полей).

5) JS-интеллект: статический и динамический анализ

Статический разбор JS: карты импорта, endpoints, ключи/токены, sinks (eval, innerHTML…).

Динамика: перехват XHR/fetch/WebSocket, сбор схем запросов и ответов.

Декод/деобфускация типовых паттернов, извлечение секретов/конфигов.

6) Техстек-фингерпринтинг и «паспорт» цели

TLS/сертификаты, сервер/фреймворки/CMS/CDN, версии по баннерам и косвенным признакам.

Политики безопасности: CSP, CORS, HSTS, cookies flags, cache-headers.

Отчёт «паспорт сайта» как база для CVE-корреляции.

7) Качественное хранилище и модель данных

Единый schema для URL, ответов, редиректов, ошибок, артефактов JS/API.

Контент-адресное хранение (hash-based) + индексы по домену/пути/параметрам.

Версионирование снимков страниц/DOM/ответов — для диффов и регрессии.

8) Подсистема эвристик и правил

Rule Engine/DSL: «если встретил X → сделай Y» (логин, переключи клиент, измени тайминги).

Профили обхода: «агрессивный поиск параметров», «API-фокус», «формы и загрузки».

Точки расширения плагинами (post-fetch, pre-fetch, form-runner, JS-hook).

9) Пробники уязвимостей (safe-mode fuzzing)

Лёгкие безопасные payload-пробы: отражение, контекст, фильтры (XSS-, инъекционные признаки).

Чек-листы: Open Redirect, CRLF, Host header, CORS-misconfig, cache-poisoning hints.

Автоподбор контекста (HTML/JS/Attr/URL) и источника (параметр, заголовок, тело).

10) API-разведка и специфические поверхности

OpenAPI/GraphQL/Swagger детект + словарь эндпоинтов из трафика.

Тесты схем/типов/границ (simple fuzz, enum drift, authZ на методах).

WebSocket и SSE: сбор сообщений, примитивные проверки.

11) Масштабирование, устойчивость и контроль скорости

Очереди/пулы, ограничители (per host/route), паузы/резюме/повторы с backoff.

Дистрибуция задач (многопроцесс/многоузлов), «горячая» смена профилей.

Чёткая телеметрия: метрики скорости, ошибок, глубины, покрытия.

12) Логи, артефакты и воспроизводимость

Структурированные логи + скриншоты/har/pcap/сырые запросы.

«Кнопка воспроизведения»: повтор запроса/сессии в один клик.

Экспорт в JSON/CSV/HTML-отчёты и интеграции (Burp, Nuclei, GHA).

13) Корреляция с уязвимостями и приоритизация

Mappинг «паспорт сайта» → CVE/NVD/GitHub Advisories.

Весовые модели риска (техстек × версии × политики × признаки).

Трекинг находок: статус/дедуп, группировка по паттернам.

14) UX для исследователя безопасности

Таблицы задач/результатов (у вас уже есть) + граф домена, временная шкала запросов.

Быстрый фильтр/поиск по заголовкам/кодам/параметрам/паттернам.

One-click «исследовать глубже»: открыть форму, повторить XHR, построить дифф DOM.

15) Безопасность самого инструмента

«Безопасный режим»: запрет опасных методов/побочных эффектов по умолчанию.

Санитария payload’ов и журнал действий (кто/что/когда запускал).

Чёткие профили прав при работе в корпоративной сети/лабах.