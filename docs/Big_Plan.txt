WEBSECSUITE — БОЛЬШОЙ ПЛАН РАЗВИТИЯ ПАРСЕРА
Дата: 2025-08-15
Версия: 1.0 (основа по strong_parser_advices + optimize_advices_deepseek)

ОБЩИЕ ПРИНЦИПЫ
- Стабильность и масштабируемость ядра — прежде всего. Любые «умные» функции строятся на надёжном сетевом стеке.
- Два клиента: быстрый RAW HTTP и браузерный рендер (fallback); автоматическое переключение по эвристикам.
- Единая модель данных (Result schema) и структурные логи. Все модули пишут в согласованные структуры.
- Каждая фича — с измеримым «Definition of Done» (DoD): тесты, метрики, документация, UX-потоки.
- Прежде чем переходить к следующему этапу: убедиться, что текущее состояние запускается без падений, UI-логи стабильны.

TL;DR (на ближайшие 2–3 недели)
1) Спринт A: стабилизация ядра C++/libcurl (таймауты, редиректы, HTTP/2, RAII, мьютексы) + Result schema + базовые метрики.
2) Спринт B: двойной клиент (RAW→Playwright), простые антибот-профили, базовые экстракторы (ссылки, формы, meta, JSON‑LD).
3) Спринт C: интеллектуальный краул (приоритеты, карта сайта/зависимостей), «паспорт сайта», начальная корреляция с CVE.

СТРУКТУРА СПРИНТОВ
------------------------------------------------------------
СПРИНТ A — «ФУНДАМЕНТ: СЕТЕВОЙ СТЕК И СТАБИЛЬНОСТЬ»
Цели:
- Убрать гонки/утечки, ввести RAII для curl, мьютексы на коллекции задач.
- Включить таймауты, follow-redirects, HTTP/2/ALPN; добавить backoff/ретраи.
- Описать и применить Result schema с редирект-цепочкой и таймингами.

Задачи:
- C++ ядро:
  [ ] Scraper::add_task — защитить коллеции задач мьютексами.
  [ ] RAII для curl: unique_ptr<CURL, CurlDeleter>, проверка CURLE_OK; единый error mapping.
  [ ] Сетевые опции: FOLLOWLOCATION, MAXREDIRS, CONNECTTIMEOUT, TIMEOUT, HTTP/2 + ALPN, TCP_FASTOPEN где доступно.
  [ ] Повторы с экспоненциальным backoff + jitter; ограничение повторов по классу ошибок.
  [ ] WorkerPool: параметризуем размер пула; подготовка к приоритетной очереди (интерфейсы).
- Python/UI:
  [ ] schemas.py — Result/RedirectHop/Timings/ErrorClass.
  [ ] scraper_tab.py — единый _apply_task_result(row, result); финальный URL берём из final_url.
  [ ] Логи: уровень + task_id + короткий error_class; фильтры по уровню.
  [ ] Экспорт предпросмотра: добавить timings, redirects, size.

DoD:
- 10 smoke‑тестов: простой сайт, редирект, 404, таймаут, медленный ответ, HSTS, сжатие, JSON API, TLS‑ошибка, блок WAF.
- 0 data races (TSAN clean, по возможности); отсутствие утечек (LSAN/valgrind, минимум — ручная проверка).
- UI показывает корректный final_url, статус, размер, цепочку редиректов; логи структурны.

------------------------------------------------------------
СПРИНТ B — «ДВА КЛИЕНТА + АНТИБОТ-ПРОФИЛИ + ЭКСТРАКТОРЫ»
Цели:
- Добавить браузерный профиль (Playwright) как fallback.
- Ввести простые антибот‑профили: ротация UA/прокси, варьирование таймингов, cookie‑джар на домен/профиль.
- Экстракция из коробки: ссылки, формы, meta/OG, JSON‑LD (минимум).

Задачи:
- Клиенты:
  [ ] RAW (libcurl/httpx) — основной; Browser (Playwright) — fallback при признаках блокировки (403/JS‑challenge).
  [ ] Перенос cookies/headers между профилями при переключении; единая cookie‑storage по домену/профилю.
  [ ] Профиль «Auto (raw→browser)» в Params→Advanced.
- Антибот‑эвристики (MVP):
  [ ] Дефолтные маркеры блокировок (captcha, JS‑challenge) → автопереключение профиля.
  [ ] Базовая ротация: UA‑пулы, proxy‑пулы, случайные паузы в диапазонах.
- Экстракция:
  [ ] core/extractors/: links.py, forms.py, meta.py, jsonld.py.
  [ ] Сохранение в Result.schema: anchors, forms (fields, method, action), meta/og, json‑ld blobs.

DoD:
- Демонстрация обхода простых защит без «серых» техник: успешное получение целевой страницы в browser‑fallback.
- Формы извлекаются и отображаются в UI (readonly); ссылки и метаданные видны в предпросмотре.

------------------------------------------------------------
СПРИНТ C — «ИНТЕЛЛЕКТУАЛЬНЫЙ КРАУЛ + КАРТА САЙТА + ПАСПОРТ»
Цели:
- Очередь с приоритетами: тип URL, глубина, частота ошибок; нормализация и дедуп.
- Построение графа: HTML → JS → XHR/WebSocket → API; карта сайта и зависимостей.
- «Паспорт сайта»: TLS/сертификаты, стеки/версии, политики безопасности (CSP/CORS/HSTS/cookie‑flags) как база для CVE.

Задачи:
  [ ] PriorityQueue<TaskItem {priority, host, depth, submitted_at}> + backpressure (high‑watermark).
  [ ] Нормализация URL (каноникал, параметры, якоря), дедупликация по контент‑хэшу.
  [ ] post‑fetch анализ: сбор script src, XHR/fetch шаблонов (если доступны), базовое API‑словарь.
  [ ] Модуль «паспорт сайта»: TLS info, сервер/фреймворки/CMS/CDN, политики безопасности; выгрузка в таблицу.
  [ ] Связка с CVE‑модулем: кнопка Check CVEs из «паспорта».

DoD:
- В UI доступна карта сайта (минимум: таблица/дерево по домену, глубине, типу).
- «Паспорт» формирует структурированный отчёт и триггерит проверку CVE.

------------------------------------------------------------
СПРИНТ D — «JS‑ИНТЕЛЛЕКТ И API‑РАЗВЕДКА (MVP)»
Цели:
- Статический разбор JS: импорты, endpoints, ключи/токены, sinks (eval/innerHTML).
- Динамика (браузер): перехват XHR/fetch/WebSocket; сбор схем запросов/ответов; словарь эндпоинтов.
- API‑детект: OpenAPI/Swagger/GraphQL; простые проверки схем/типов/границ.

Задачи:
  [ ] Статика: парсер JS (легковесные эвристики + регулярки как MVP); отчёты по endpoints/keys/sinks.
  [ ] Динамика: Browser hooks для XHR/fetch/WebSocket; логгирование в артефакты.
  [ ] API‑детект: скан известных путей, извлечение .json/.yaml схем, базовые тесты enum/nullable/границ.

DoD:
- Для test‑хостов виден список обнаруженных API‑эндпоинтов и базовые проверки (schema drift/enum).

------------------------------------------------------------
СПРИНТ E — «МАСШТАБИРОВАНИЕ И ПРОИЗВОДИТЕЛЬНОСТЬ»
Цели:
- Приоритизация/ограничители per‑host/per‑route; пауза/резюме/повторы с backoff.
- DNS‑кэш (c‑ares), предвыборка SSL‑сессий; метрики скорости/ошибок/покрытия.
- Подготовка к многопроцессной/многоузловой дистрибуции задач.

Задачи:
  [ ] Rate‑limit и concurrency‑limit per host/route.
  [ ] DNS‑кэш, session resumption, connection reuse.
  [ ] Метрики (Prometheus‑friendly): rps, error_rate, depth, coverage; алерты.
  [ ] Интерфейс распределённого раннера (на будущее Docker/боты).

DoD:
- Лимиты реально работают (интеграционные тесты).
- Видно ускорение за счёт DNS‑кэша и reuse.

------------------------------------------------------------
СПРИНТ F — «ЛОГИ, АРТЕФАКТЫ И ВОСПРОИЗВОДИМОСТЬ»
Цели:
- Структурные логи + артефакты: скриншоты, HAR, сырые запросы.
- «Кнопка воспроизведения»: повтор любого запроса/сессии по артефактам.
- Экспорт: JSON/CSV/HTML‑отчёты; интеграции (Burp/Nuclei/GitHub Actions).

Задачи:
  [ ] Снятие HAR/скриншотов в browser‑профиле; сырой запрос/ответ в RAW‑профиле.
  [ ] UI‑воспроизведение запроса + сохранённые cookies/headers/прокси.
  [ ] Экспорт в HTML‑отчёт (read‑only), интеграция с Burp/Nuclei.

DoD:
- Из UI можно воспроизвести любой запрос «в один клик». Отчёты формируются корректно.

------------------------------------------------------------
СПРИНТ G — «UX И ПАНЕЛИ УПРАВЛЕНИЯ»
Цели:
- ParamsDialog Advanced: профили обхода/антибот, лимиты, таймауты, пресеты.
- Cookies‑вкладка: Add/Edit/Delete, импорт/экспорт, привязка к домену/профилю.
- Таблицы: фильтры по level/host/task_id/кодам/паттернам, быстрые действия «исследовать глубже».

DoD:
- Все пресеты сохраняются/загружаются; операции с cookies из UI; фильтрация логов удобная и быстрая.

------------------------------------------------------------
СПРИНТ H — «БЕЗОПАСНОСТЬ И SAFE‑MODE FUZZ»
Цели:
- Лёгкие безопасные пробы уязвимостей: XSS‑контекст, Open Redirect, CRLF, CORS‑misconfig, Host header, cache‑poisoning hints.
- Жёсткий «безопасный режим»: запрет опасных методов по умолчанию; логирование действий.

DoD:
- На тестовых стендах видим корректные подсказки/флаги без побочных эффектов.

КРОСС‑МОДУЛЬНЫЕ ПРАВИЛА КАЧЕСТВА (ДЕЙСТВУЮТ ВСЕГДА)
- Тесты: unit + smoke + интеграционные; позже fuzz (libFuzzer) и сетевые симуляции (tc netem).
- Документация: Doxygen для C++; README/диаграммы для архитектуры; примеры CLI/GUI сценариев.
- CI/CD: линтеры (clang‑tidy/flake8), сборки, запуск тестов; публикация отчётов (coverage, бенчмарки).
- Конфиги: pydantic‑settings и JSON‑пресеты; «user_defaults.json» для UI‑профилей.
- Стандарты кода: явные типы, RAII, запрет голых new/delete; отсутствие «тихих» исключений.

КОНКРЕТИКА ПО ФАЙЛАМ/ПАПКАМ
- core/cpp/: scraper.cpp/.hpp (мьютексы), curl_handle.hpp (RAII), http_client.cpp (таймауты/редиректы/H2/ALPN), worker_pool.* (очередь/приоритеты).
- core/python/: schemas.py (Result/RedirectHop/Timings/ErrorClass), http_client.py (если httpx), extractors/* (links/forms/meta/jsonld).
- ui/panels/scraper_tab.py: _apply_task_result, структурные логи, диалог «Redirects timeline».
- dialogs/: params_dialog.py (профили и пресеты), cookies диалоги (Add/Edit/Delete).
- data/: cookies_*.json, exports/*, artifacts/* (HAR, screenshots), reports/* (HTML).

РИСКИ И СНИЖЕНИЕ РИСКОВ
- Сетевые блокировки/антибот: fallback + вариативность таймингов; ограничители скорости; ручной override.
- Производительность: DNS‑кэш, session resumption, reuse; бенчмарки перед релизом.
- Стабильность: поэтапное включение фич флагами; быстрый rollback.

ОТЛОЖЕННЫЕ ИДЕИ
- Асинхронный движок на libuv/Boost.Asio (после стабилизации H2/HAR).
- HTTP/3 (quiche) после результатов H2.
- Плагины (Lua/Python/WebAssembly); GraphQL/CLI для управления.
- Боты/Docker‑контейнеры и распределённый раннер.

ОТСЛЕЖИВАНИЕ ПРОГРЕССА
- Вести: docs/roadmap.md, data/planning/next_step.txt (текущие задачи), already_done.txt (сводка завершённых).
- Для каждого спринта: список задач, DoD, результаты тестов, заметки.

КОНТРОЛЬНАЯ СПРАВКА (КРАТКО)
- «Сильный парсер»: два клиента, антибот‑профили, умный краул, формы, JS‑интеллект, «паспорт сайта», Rule Engine, безопасные пробники, API‑разведка, масштабирование, артефакты, корреляция с CVE, удобный UX, безопасность инструмента.
- «Оптимизация ядра»: мьютексы/RAII, таймауты/редиректы/HTTP2, приоритетная очередь, backpressure, DNS‑кэш, session resumption, бенчмарки, fuzz‑тесты, дока.

КОНЕЦ ПЛАНА
