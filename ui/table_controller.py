# ui/table_controller.py
from __future__ import annotations
from ui.constants import Col
from typing import Optional, Iterable, Dict, List, Tuple
from PySide6.QtCore import Qt, QSettings, QPoint
from PySide6.QtWidgets import QTableWidget, QTableWidgetItem, QHeaderView, QAbstractItemView, QMenu
from PySide6.QtGui import QAction

import json

SETTINGS_KEY = "ui/taskTable/widths_v2"

DEFAULT_WIDTHS = {
    Col.URL:     260,
    Col.Status:   90,
    Col.Code:     70,
    Col.Time:     90,
    Col.Results: 520,
    Col.Cookies:  80,
    Col.Params:  120,
}
ROLE_TASK_ID = Qt.UserRole + 1

class TaskTableController:
    def __init__(self, table: QTableWidget):
        self.table = table
        self._col_index_cache: Dict[str, int] = {}
        self._setup_table_base()
        hh = table.horizontalHeader()
        
         # 1) –†—É—á–Ω–∞—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞, –ù–ò–ö–ê–ö–û–ì–û ResizeToContents –≥–ª–æ–±–∞–ª—å–Ω–æ
        hh.setSectionResizeMode(QHeaderView.Interactive)
        hh.setStretchLastSection(False)
        hh.setHighlightSections(False)
        hh.setSectionsMovable(False)   # –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
        hh.setCascadingSectionResizes(False)

        # 2) –ö–æ–Ω—Ç–µ–∫—Å—Ç-–º–µ–Ω—é —Ö–µ–¥–µ—Ä–∞: –¥–æ–±–∞–≤–∏–º Reset
        hh.setContextMenuPolicy(Qt.CustomContextMenu)
        hh.customContextMenuRequested.connect(self._on_header_menu)

        # 3) –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é ‚Üí –∞–≤—Ç–æ-–ø–æ–¥–æ–≥–Ω–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É
        hh.sectionHandleDoubleClicked.connect(self._on_handle_double_click)

        # 4) –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∏—Ä–∏–Ω—ã (–∏–ª–∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç—ã)
        if not self.restore_column_widths():
            self.apply_default_widths()

        # 5) –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        hh.sectionResized.connect(lambda *_: self.save_column_widths())
        
        self._init_header_tooltips()
        
        
    def apply_common_view_settings(self):
        t = self.table
        t.verticalHeader().setVisible(False)
        t.setEditTriggers(QAbstractItemView.NoEditTriggers)
        t.setSelectionBehavior(QAbstractItemView.SelectRows)
        t.setSelectionMode(QAbstractItemView.ExtendedSelection)
        t.setAlternatingRowColors(True)
        
        # ---------- –ü–æ–ª–∏—Ç–∏–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ ----------
    def setup_resize_policies(self):
        t = self.table
        hh = t.horizontalHeader()
        vh = t.verticalHeader()

        # —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ ‚Äî —Ä—É–∫–∞–º–∏
        hh.setSectionResizeMode(QHeaderView.Interactive)
        hh.setStretchLastSection(False)

        # –í–ê–ñ–ù–û: –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫ ‚Äî –ù–ï Auto, –∞ —Ä—É–∫–∞–º–∏
        vh.setSectionResizeMode(QHeaderView.Interactive)   # –º–æ–∂–Ω–æ —Ç—è–Ω—É—Ç—å –º—ã—à—å—é
        vh.setDefaultSectionSize(26)                       # –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ (–ø–æ–¥–±–µ—Ä–∏ 24‚Äì28)

        # —á—Ç–æ–±—ã –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ ¬´–ø—Ä–∏–Ω—É–∂–¥–∞–ª¬ª –∫ —Ä–æ—Å—Ç—É —Å—Ç—Ä–æ–∫–∏ –∏–∑-–∑–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞
        t.setWordWrap(False)



    # ---------- Widths ----------

    def apply_default_widths(self):
        for col, w in DEFAULT_WIDTHS.items():
            if 0 <= col < self.table.columnCount():
                self.table.setColumnWidth(int(col), int(w))

    def save_column_widths(self):
        try:
            widths = [self.table.columnWidth(i) for i in range(self.table.columnCount())]
            QSettings().setValue(SETTINGS_KEY, widths)
        except Exception:
            # –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç—É—Ç, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–ø–∞–º–∏—Ç—å ‚Äî ¬´–º–æ–ª—á–∞–ª–∏–≤—ã–π¬ª –≥–≤–∞—Ä–¥
            pass

    def restore_column_widths(self) -> bool:
        try:
            v = QSettings().value(SETTINGS_KEY, None)
            if not v:
                return False
            widths = list(map(int, v))
            if len(widths) != self.table.columnCount():
                return False
            for i, w in enumerate(widths):
                self.table.setColumnWidth(i, max(24, w))  # –º–∏–Ω–∏–º—É–º —á—Ç–æ–±—ã –Ω–µ —Å—Ö–ª–æ–ø—ã–≤–∞–ª–æ—Å—å
            return True
        except Exception:
            return False

    def reset_column_widths(self):
        self.apply_default_widths()
        self.save_column_widths()

    def bind_header_resize_autosave(self, settings: QSettings, group: str = "taskTable"):
        header = self.table.horizontalHeader()
        if not header:
            return
        header.sectionResized.connect(lambda *_: self.save_column_widths(settings, group))

    # ---------- –ü–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã ----------
    def _setup_table_base(self):
        t = self.table
        t.setSortingEnabled(False)  # –≤–∫–ª—é—á–∏–º –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ —É–±–µ–¥–∏–º—Å—è –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
        header = t.horizontalHeader()
        if header is not None:
            header.setStretchLastSection(True)

        # –ö—ç—à –∫–æ–ª–æ–Ω–æ—á–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ (–ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É)
        self._rebuild_col_cache()

    def _rebuild_col_cache(self):
        self._col_index_cache.clear()
        t = self.table
        cols = t.columnCount()
        for i in range(cols):
            item = t.horizontalHeaderItem(i)
            name = (item.text().strip() if item else f"Col{i}")
            self._col_index_cache[name] = i
            
        # ---------- Header UX ----------

    def _on_handle_double_click(self, logicalIndex: int):
        """–î–∞–±–ª-–∫–ª–∏–∫ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é ‚Üí resize —Ç–æ–ª—å–∫–æ —ç—Ç–æ–π —Å–µ–∫—Ü–∏–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É."""
        if 0 <= logicalIndex < self.table.columnCount():
            self.table.resizeColumnToContents(logicalIndex)
            # —á—É—Ç—å —Ä–∞—Å—à–∏—Ä–∏–º, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –Ω–µ —É–ø–∏—Ä–∞–ª—Å—è –≤ –≥—Ä–∞–Ω–∏—Ü—É
            self.table.setColumnWidth(logicalIndex, self.table.columnWidth(logicalIndex) + 12)
            self.save_column_widths()

    def _on_header_menu(self, pos: QPoint):
        menu = QMenu(self.table)
        act_reset = QAction("Reset column widths", menu)
        act_reset.triggered.connect(self.reset_column_widths)

        act_autofit_all = QAction("Auto-fit all (once)", menu)
        act_autofit_all.triggered.connect(self._autofit_all_once)

        menu.addAction(act_reset)
        menu.addSeparator()
        menu.addAction(act_autofit_all)
        menu.exec(self.table.horizontalHeader().mapToGlobal(pos))

    def _autofit_all_once(self):
        """–†–∞–∑–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ-–ø–æ–¥–≥–æ–Ω–∫–∏ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ (–±–µ–∑ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞)."""
        # –í–ê–ñ–ù–û: –Ω–µ –≤–∫–ª—é—á–∞–µ–º ResizeToContents –ø–æ—Å—Ç–æ—è–Ω–Ω–æ, —Ç–æ–ª—å–∫–æ –≤—ã–∑–æ–≤ resizeColumnToContents
        for i in range(self.table.columnCount()):
            self.table.resizeColumnToContents(i)
            self.table.setColumnWidth(i, self.table.columnWidth(i) + 12)
        self.save_column_widths()

    # ---------- –ö–æ–ª–æ–Ω–∫–∏ ----------
    def col(self, name: str) -> int:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∏–º–µ–Ω–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞."""
        if name in self._col_index_cache:
            return self._col_index_cache[name]
        # –ü–µ—Ä–µ—Å—Ç—Ä–æ–∏–º –∫—ç—à –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∏
        self._rebuild_col_cache()
        return self._col_index_cache.get(name, 0)

    # ---------- –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã ----------
    def ensure_item(self, row: int, col: int) -> QTableWidgetItem:
        t = self.table
        item = t.item(row, col)
        if item is None:
            item = QTableWidgetItem()
            t.setItem(row, col, item)
        return item

    def selected_rows(self) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (–ø–æ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º item‚Äô–∞–º)."""
        rows = {idx.row() for idx in self.table.selectedIndexes()}
        return sorted(rows)

    # ---------- task_id storage ----------
    def set_row_task_id(self, row: int, task_id: str):
        it = self.ensure_item(row, Col.URL)
        it.setData(ROLE_TASK_ID, task_id)

    def task_id_by_row(self, row: int) -> str | None:
        item = self.table.item(row, Col.URL)
        if not item:
            return None
        val = item.data(ROLE_TASK_ID)
        if isinstance(val, str) and val:
            return val
        # üîÅ fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–æ–∫ (–º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ –ª–µ—Ç—É)
        legacy = item.data(Qt.UserRole)
        if isinstance(legacy, str) and legacy:
            item.setData(ROLE_TASK_ID, legacy)   # –º–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
            return legacy
        return None

    def row_by_task_id(self, task_id: str) -> int:
        t = self.table
        for row in range(t.rowCount()):
            item = t.item(row, Col.URL)
            if item and item.data(ROLE_TASK_ID) == task_id:
                return row
        return -1

    # ---------- –°–µ—Ç—Ç–µ—Ä—ã —è—á–µ–µ–∫ ----------
    def set_url_cell(self, row: int, url: str, title: str | None = None, task_id: str | None = None):
        it = self.ensure_item(row, Col.URL)
        it.setText(url or "")
        if title:
            it.setToolTip(title)
        if task_id:
            # –ø–∏—à–µ–º –≤ –æ–±–∞ —Å–ª–æ—Ç–∞ (–Ω–æ–≤—ã–π –∏ —Å—Ç–∞—Ä—ã–π) –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            it.setData(ROLE_TASK_ID, task_id)
            it.setData(Qt.UserRole, task_id)

    def set_status_cell(self, row: int, status: str):
        it = self.ensure_item(row, Col.Status)
        it.setText(status or "")

    def set_code_cell(self, row: int, code: Optional[int]):
        it = self.ensure_item(row, Col.Code)
        it.setText("" if code is None else str(code))

    def set_time_cell(self, row: int, ms: Optional[int]):
        it = self.ensure_item(row, Col.Time)
        it.setText("" if ms is None else f"{ms} ms")

    def set_results_cell(
        self,
        row: int,
        payload: dict | None = None,       # –≤–∞—Ä–∏–∞–Ω—Ç 1: –¥–∞—ë–º –ø–æ–ª–Ω—ã–π payload
        summary: str | None = None,        # –≤–∞—Ä–∏–∞–Ω—Ç 2: –¥–∞—ë–º –∫—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
        payload_short: str | None = None,  # tooltip/–∫–æ—Ä–æ—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è payload
    ):
        """
        –£–º–µ–µ—Ç –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞:
          ‚Ä¢ set_results_cell(row, payload=payload)
          ‚Ä¢ set_results_cell(row, summary="200 ¬∑ 12KB ¬∑ 540 ms ¬∑ r=1", payload_short="<pretty json>")

        –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω payload ‚Äî —Å–∞–º —Å–æ–±–µ—Ä—ë—Ç summary –∏ tooltip.
        """
        item = self.ensure_item(row, Col.Results)

        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ø–µ—Ä–µ–¥–∞–ª–∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π payload -> —Å–¥–µ–ª–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∏ tooltip
        if payload is not None:
            code = payload.get("status_code")
            size = payload.get("content_len")
            tms  = (payload.get("timings") or {}).get("request_ms")
            red  = len(payload.get("redirect_chain") or [])
            summary = f"{code} ¬∑ {size} B ¬∑ {tms} ms ¬∑ r={red}"

            try:
                payload_short = json.dumps(payload, ensure_ascii=False, indent=2)
            except Exception:
                payload_short = str(payload)

        # –í–∞—Ä–∏–∞–Ω—Ç 2: –ø–µ—Ä–µ–¥–∞–ª–∏ —É–∂–µ –≥–æ—Ç–æ–≤—ã–µ summary/payload_short
        text = summary or ""
        tip  = payload_short or ("No results yet" if not text else "")

        item.setText(text)
        item.setData(Qt.TextAlignmentRole, Qt.AlignLeft | Qt.AlignVCenter)
        item.setToolTip(tip)


    def set_cookies_cell(self, row: int, has: bool, tip: str = ""):
        it = self.ensure_item(row, Col.Cookies)
        it.setText("Yes" if has else "No")
        if tip:
            it.setToolTip(tip)

    def set_params_cell(self, row: int, text: str):
        it = self.ensure_item(row, Col.Params)
        it.setText(text or "")

    # ---------- –†–∞–∑–Ω–æ–µ ----------
    def ensure_row_visible(self, row: int):
        self.table.scrollToItem(self.ensure_item(row, 0))
        
        
    def _init_header_tooltips(self):
        """
        –ù–∞–∑–Ω–∞—á–∞–µ—Ç tooltips –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–æ–ª–æ–Ω–æ–∫.
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ–∑–¥–∞—ë—Ç headerItem, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç.
        """
        t = self.table

        tips: dict[int, str] = {
            Col.URL:     "–ò—Å—Ö–æ–¥–Ω—ã–π –∞–¥—Ä–µ—Å –∑–∞–¥–∞—á–∏ (–¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ)",
            Col.Status:  "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ (PENDING / RUNNING / DONE / FAILED / STOPPED)",
            Col.Code:    "HTTP-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)",
            Col.Time:    "–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞, –º—Å (timings.request_ms)",
            Col.Results: "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞; –ø–æ–ª–Ω—ã–π JSON ‚Äî –≤ tooltip —è—á–µ–π–∫–∏",
            Col.Cookies: "–ö—É–∫–∏-—Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∑–∞–¥–∞—á–µ–π (–∞–≤—Ç–æ –ø–æ –¥–æ–º–µ–Ω—É –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—É—Ç—å)",
            Col.Params:  "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: –º–µ—Ç–æ–¥, proxy, headers, user-agent –∏ —Ç.–¥.",
        }

        for col, tip in tips.items():
            self._ensure_header_item(col)
            item = t.horizontalHeaderItem(col)
            if item:
                item.setToolTip(tip)

    def _ensure_header_item(self, col: int):
        """
        QTableWidget –∏–Ω–æ–≥–¥–∞ –Ω–µ –∏–º–µ–µ—Ç headerItem –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–¥–∞–Ω—ã —á–µ—Ä–µ–∑ setHorizontalHeaderLabels.
        –°–æ–∑–¥–∞—ë–º QTableWidgetItem –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –Ω–µ –º–µ–Ω—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞.
        """
        t = self.table
        if 0 <= col < t.columnCount() and t.horizontalHeaderItem(col) is None:
            # –±–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
            header_text = t.model().headerData(col, Qt.Horizontal, Qt.DisplayRole)
            item = QTableWidgetItem(str(header_text) if header_text is not None else "")
            t.setHorizontalHeaderItem(col, item)

