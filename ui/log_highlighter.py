#–ö–ª–∞—Å—Å –•–∞–π–ª–∞–π—Ç–µ—Ä
# ui/log_highlighter.py
from PySide6.QtGui import QSyntaxHighlighter, QTextCharFormat, QColor, QFont
from PySide6.QtCore import Qt, QRegularExpression



class LogHighlighter(QSyntaxHighlighter):
    def __init__(self, document):
        super().__init__(document)
        # –§–æ—Ä–º–∞—Ç—ã
        self.f_info = QTextCharFormat()
        self.f_info.setForeground(QColor("#A0A0A0"))  # –º—è–≥–∫–∏–π —Å–µ—Ä—ã–π

        self.f_warn = QTextCharFormat()
        self.f_warn.setForeground(QColor("#C8A200"))  # –∂—ë–ª—Ç–æ-—è–Ω—Ç–∞—Ä–Ω—ã–π
        self.f_warn.setFontWeight(QFont.Bold)

        self.f_error = QTextCharFormat()
        self.f_error.setForeground(QColor("#E05A5A"))  # –∫—Ä–∞—Å–Ω—ã–π
        self.f_error.setFontWeight(QFont.Bold)

        self.f_result = QTextCharFormat()
        self.f_result.setForeground(QColor("#3CC3D3"))  # –±–∏—Ä—é–∑–æ–≤—ã–π
        self.f_result.setFontWeight(QFont.DemiBold)

        self.f_taskid = QTextCharFormat()
        self.f_taskid.setForeground(QColor("#808080"))  # —Å–µ—Ä—ã–π –¥–ª—è [abcd1234]
        
        self._search_regex = QRegularExpression()
        self._search_fmt = QTextCharFormat()
        self._search_fmt.setBackground(QColor(255, 255, 0, 100))
        
        # üëá –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self._match_ranges: list[tuple[int,int]] = []
        self._match_idx: int = -1

    def highlightBlock(self, text: str):
        # --- –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —É—Ä–æ–≤–Ω–µ–π ---
        if "] [ERROR]" in text:
            self.setFormat(0, len(text), self.f_error)
        elif "] [WARN]" in text:
            self.setFormat(0, len(text), self.f_warn)
        elif "] [RESULT]" in text:
            self.setFormat(0, len(text), self.f_result)
        elif "] [INFO]" in text:
            self.setFormat(0, len(text), self.f_info)

        # --- –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ task_id –≤–∏–¥–∞ [e0f1a2b3] ---
        start = 0
        while True:
            i = text.find("[", start)
            if i < 0:
                break
            j = text.find("]", i + 1)
            if j < 0:
                break
            token = text[i:j + 1]
            # [abcdef12] ‚Äî –≤–æ—Å—å–º–∏–∑–Ω–∞—á–Ω—ã–π hex?
            if len(token) == 10 and all(c in "0123456789abcdef" for c in token[1:-1].lower()):
                self.setFormat(i, j - i + 1, self.f_taskid)
            start = j + 1

        # --- –î–æ–ø. –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ + —Å–±–æ—Ä –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ ---
        # –í–ê–ñ–ù–û: self._match_ranges –¥–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å—Å—è –î–û rehighlight() (–≤ set_search)
        if hasattr(self, "_search_regex") and self._search_regex.isValid() and self._search_regex.pattern():
            block_pos = self.currentBlock().position()  # –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –±–ª–æ–∫–∞
            it = self._search_regex.globalMatch(text)
            while it.hasNext():
                m = it.next()
                s, ln = m.capturedStart(), m.capturedLength()
                # –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
                self.setFormat(s, ln, self._search_fmt)
                # –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                if hasattr(self, "_match_ranges"):
                    self._match_ranges.append((block_pos + s, block_pos + s + ln))

            
    def set_search(self, text: str, *, regex_mode: bool = False, case_sensitive: bool = False, whole_word: bool = False):
        # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ—à–ª—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        self._match_ranges.clear()
        self._match_idx = -1

        if not text:
            self._search_regex = QRegularExpression()
            self.rehighlight()
            return

        if regex_mode:
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –≤–≤—ë–ª regex ‚Äî –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
            pattern = text
            if whole_word:
                # –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–∫ —Å–ª–æ–≤–æ: \b(?:...)\b
                pattern = r"\b(?:" + pattern + r")\b"
        else:
            # –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Üí —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
            pattern = QRegularExpression.escape(text)
            if whole_word:
                pattern = r"\b" + pattern + r"\b"

        rx = QRegularExpression(pattern)
        rx.setPatternOptions(
            QRegularExpression.NoPatternOption if case_sensitive
            else QRegularExpression.CaseInsensitiveOption
        )
        self._search_regex = rx
        self._match_ranges.clear()
        self._match_idx = -1
        self.rehighlight()

    def get_match_ranges(self) -> list[tuple[int,int]]:
        return list(self._match_ranges)

    @property
    def match_count(self) -> int:
        return len(self._match_ranges)

    def next_match(self):
        n = len(self._match_ranges)
        if n == 0:
            self._match_idx = -1
            return (-1, 0)
        self._match_idx = (self._match_idx + 1) % n
        return (self._match_idx, n)

    def prev_match(self):
        n = len(self._match_ranges)
        if n == 0:
            self._match_idx = -1
            return (-1, 0)
        self._match_idx = (self._match_idx - 1) % n
        return (self._match_idx, n)