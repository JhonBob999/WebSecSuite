# ui/panels/scraper_tab.py
from __future__ import annotations
from PySide6.QtCore import Qt, Slot
from PySide6.QtWidgets import QWidget, QTableWidgetItem, QAbstractItemView, QHeaderView

from .scraper_panel_ui import Ui_scraper_panel
from core.scraper.task_manager import TaskManager
from core.scraper.task_types import TaskStatus


class ScraperTabController(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)

        # 1) –ü–æ–¥–Ω–∏–º–∞–µ–º UI
        self.ui = Ui_scraper_panel()
        self.ui.setupUi(self)

        # 2) –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á + –∏–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫
        self.task_manager = TaskManager()
        self._row_by_task_id = {}

        # 3) –°–∏–≥–Ω–∞–ª—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ -> –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        self.task_manager.task_log.connect(self.on_task_log)
        self.task_manager.task_status.connect(self.on_task_status)
        self.task_manager.task_progress.connect(self.on_task_progress)
        self.task_manager.task_result.connect(self.on_task_result)
        self.task_manager.task_error.connect(self.on_task_error)

        # 4) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
        table = self.ui.taskTable
        table.setColumnCount(2)  # –ø–æ–∫–∞: URL | Status
        table.setHorizontalHeaderLabels(["URL", "Status"])
        table.verticalHeader().setVisible(False)
        table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        table.setSelectionBehavior(QAbstractItemView.SelectRows)
        table.setSelectionMode(QAbstractItemView.SingleSelection)
        table.setAlternatingRowColors(True)
        table.setSortingEnabled(False)

        # üëâ –ê–≤—Ç–æ–ø–æ–¥–≥–æ–Ω —Ä–∞–∑–º–µ—Ä–æ–≤
        hh: QHeaderView = table.horizontalHeader()
        vh: QHeaderView = table.verticalHeader()
        # –∫–æ–ª–æ–Ω–∫–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        hh.setSectionResizeMode(0, QHeaderView.ResizeToContents)  # URL
        hh.setSectionResizeMode(1, QHeaderView.ResizeToContents)  # Status
        # –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ (—á—Ç–æ–± –∫—Ä–∞—Å–∏–≤–æ —Ç—è–Ω—É–ª–∞—Å—å)
        hh.setStretchLastSection(True)
        # —Å—Ç—Ä–æ–∫–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        vh.setSectionResizeMode(QHeaderView.ResizeToContents)

        # 5) –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        self.add_task_row("https://example.com")
        self.add_task_row("https://cnn.com")
        self.add_task_row("https://github.com")

        # 6) –ö–Ω–æ–ø–∫–∏ ‚Äî –ø–æ–¥–∫–ª—é—á–∞–µ–º —è–≤–Ω–æ
        assert hasattr(self.ui, "btnStart"), "–í .ui –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ btnStart"
        assert hasattr(self.ui, "btnStop"), "–í .ui –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ btnStop"
        assert hasattr(self.ui, "btnExport"), "–í .ui –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ btnExport"

        # —Å–Ω–∏–º–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω–Ω–µ–∫—Ç—ã (–Ω–∞ —Å–ª—É—á–∞–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
        for btn in (self.ui.btnStart, self.ui.btnStop, self.ui.btnExport):
            try:
                btn.clicked.disconnect()
            except Exception:
                pass

        self.ui.btnStart.clicked.connect(self.on_start_clicked)
        self.ui.btnStop.clicked.connect(self.on_stop_clicked)
        self.ui.btnExport.clicked.connect(self.on_export_clicked)

    # ---------- –¢–∞–±–ª–∏—Ü–∞ –∏ —Å—Ç—Ä–æ–∫–∏ ----------
    def add_task_row(self, url: str, params: dict | None = None) -> None:
        task_id = self.task_manager.create_task(url, params or {})

        row = self.ui.taskTable.rowCount()
        self.ui.taskTable.insertRow(row)

        # URL
        url_item = QTableWidgetItem(url)
        url_item.setData(Qt.UserRole, task_id)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º task_id
        self.ui.taskTable.setItem(row, 0, url_item)

        # Status
        status_item = QTableWidgetItem(TaskStatus.PENDING.value)
        self.ui.taskTable.setItem(row, 1, status_item)

        self._row_by_task_id[task_id] = row

        # –ø–æ–¥–∂–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã —Å—Ä–∞–∑—É
        self.ui.taskTable.resizeRowToContents(row)
        self.ui.taskTable.resizeColumnToContents(0)
        self.ui.taskTable.resizeColumnToContents(1)

    def _find_row_by_task_id(self, task_id: str) -> int:
        return self._row_by_task_id.get(task_id, -1)

    def _set_status_text(self, row: int, text: str) -> None:
        if row < 0:
            return
        item = self.ui.taskTable.item(row, 1)
        if item:
            item.setText(text)
            # –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –ø–æ–¥ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            self.ui.taskTable.resizeRowToContents(row)
            self.ui.taskTable.resizeColumnToContents(1)

    # ---------- –°–ª–æ—Ç—ã –∫–Ω–æ–ø–æ–∫ ----------
    @Slot()
    def on_start_clicked(self):
        self.append_log_line("[UI] Start clicked")
        self.task_manager.start_all()

    @Slot()
    def on_stop_clicked(self):
        self.append_log_line("[UI] Stop clicked")
        self.task_manager.stop_all()

    @Slot()
    def on_export_clicked(self):
        self.append_log_line("[UI] Export clicked (stub)")

    # ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ----------
    @Slot(str, str, str)
    def on_task_log(self, task_id: str, level: str, text: str):
        self.append_log_line(f"[{level}][{task_id[:8]}] {text}")

    @Slot(str, str)
    def on_task_status(self, task_id: str, status_str: str):
        row = self._find_row_by_task_id(task_id)
        self._set_status_text(row, status_str)

    @Slot(str, int)
    def on_task_progress(self, task_id: str, value: int):
        row = self._find_row_by_task_id(task_id)
        if row >= 0:
            current = self.ui.taskTable.item(row, 1).text() or "Running"
            base = current.split()[0]
            self._set_status_text(row, f"{base} {value}%")

    @Slot(str, dict)
    def on_task_result(self, task_id: str, payload: dict):
        self.append_log_line(f"[RESULT][{task_id[:8]}] {payload}")

    @Slot(str, str)
    def on_task_error(self, task_id: str, error_str: str):
        self.append_log_line(f"[ERROR][{task_id[:8]}] {error_str}")

    # ---------- –õ–æ–≥–∏ ----------
    def append_log_line(self, text: str) -> None:
        self.ui.logOutput.appendPlainText(text)
        # –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª
        sb = self.ui.logOutput.verticalScrollBar()
        sb.setValue(sb.maximum())
